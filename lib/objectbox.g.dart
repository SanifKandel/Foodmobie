// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/food.dart';
import 'model/notification.dart';
import 'model/recommendation.dart';
import 'model/reminder.dart';
import 'model/user.dart';
import 'model/userfeedbacks.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1344162107331397200),
      name: 'Food',
      lastPropertyId: const IdUid(9, 924116452875215234),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6766264511993050069),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 895008027080864364),
            name: 'foodId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 7578534978283868896)),
        ModelProperty(
            id: const IdUid(3, 693679951638368095),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6445311527640188941),
            name: 'meal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1966402941569793288),
            name: 'recipe',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8181559648454035899),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4137345419773802544),
            name: 'calories',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8167979851689827224),
            name: 'ingredients',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 924116452875215234),
            name: 'time',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4946137288849511150),
      name: 'FoodMobieNotification',
      lastPropertyId: const IdUid(8, 1746758520477458698),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1365335323344484096),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1203160339072004804),
            name: 'notificationId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 6924841335964844714)),
        ModelProperty(
            id: const IdUid(3, 3324644741719095542),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6031161241616036020),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6698404406359426422),
            name: 'time',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6651867965416568347),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1746758520477458698),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 2139207748788370887),
      name: 'Recommend',
      lastPropertyId: const IdUid(9, 3007894600955716870),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6162712308096464690),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7465897426314697079),
            name: 'foodId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 6919019349821843963)),
        ModelProperty(
            id: const IdUid(3, 7938971095627612124),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2273883370859444530),
            name: 'meal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2031495745155445301),
            name: 'recipe',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1232243741282168179),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3077106941439900539),
            name: 'calories',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6039898751124124363),
            name: 'ingredients',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3007894600955716870),
            name: 'time',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1179532321345148231),
      name: 'User',
      lastPropertyId: const IdUid(8, 8917315992228147627),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5923350777080627773),
            name: 'uId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1689564194210600678),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 3031016550447647128)),
        ModelProperty(
            id: const IdUid(3, 6947579100370473240),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 732469358605942591),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 164460407294479113),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1726037806707466848),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1237900817298427317),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8917315992228147627),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 1967530988462916536),
            name: 'food',
            targetId: const IdUid(1, 1344162107331397200))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2564515615139403861),
      name: 'UserFeedback',
      lastPropertyId: const IdUid(4, 478424034160765997),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4677770528357586420),
            name: 'fId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1327650541928491593),
            name: 'feedbackId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 8361001148529263275)),
        ModelProperty(
            id: const IdUid(3, 7426572554245753816),
            name: 'subject',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 478424034160765997),
            name: 'message',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 1691860063352244565),
      name: 'Reminder',
      lastPropertyId: const IdUid(12, 8547104613125171011),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8570124643952056981),
            name: 'rId',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2672975601524153788),
            name: 'reminderId',
            type: 9,
            flags: 2080,
            indexId: const IdUid(8, 3838526471911109866)),
        ModelProperty(
            id: const IdUid(3, 8325217209502125250),
            name: 'foodname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4489661675988930997),
            name: 'calories',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7850155747571197412),
            name: 'cookingtime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1355159642397918339),
            name: 'meal',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1399208389288073595),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8712581239366386694),
            name: 'time',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3996813536829157037),
            name: 'recipe',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6623519463725003047),
            name: 'ingredients',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8675123628642272235),
            name: 'message',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(7, 1691860063352244565),
      lastIndexId: const IdUid(8, 3838526471911109866),
      lastRelationId: const IdUid(1, 1967530988462916536),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [2871977524112580146],
      retiredIndexUids: const [2627685762152290969],
      retiredPropertyUids: const [
        7771151405227623840,
        100484448431104434,
        2744814154582237263,
        4862389813192446018,
        148588992655206087,
        6945309039967837533,
        5781284698198515535,
        8915580551940455364,
        656189331751699109,
        8914483586915909112,
        1984564901565657934,
        260199429844565873,
        6302449808485769767,
        8547104613125171011
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Food: EntityDefinition<Food>(
        model: _entities[0],
        toOneRelations: (Food object) => [],
        toManyRelations: (Food object) => {},
        getId: (Food object) => object.id,
        setId: (Food object, int id) {
          object.id = id;
        },
        objectToFB: (Food object, fb.Builder fbb) {
          final foodIdOffset = fbb.writeString(object.foodId);
          final nameOffset = fbb.writeString(object.name);
          final mealOffset = fbb.writeString(object.meal);
          final recipeOffset = fbb.writeString(object.recipe);
          final imageOffset = fbb.writeString(object.image);
          final caloriesOffset = fbb.writeString(object.calories);
          final ingredientsOffset = fbb.writeString(object.ingredients);
          final timeOffset = fbb.writeString(object.time);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, foodIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, mealOffset);
          fbb.addOffset(4, recipeOffset);
          fbb.addOffset(5, imageOffset);
          fbb.addOffset(6, caloriesOffset);
          fbb.addOffset(7, ingredientsOffset);
          fbb.addOffset(8, timeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Food(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    FoodMobieNotification: EntityDefinition<FoodMobieNotification>(
        model: _entities[1],
        toOneRelations: (FoodMobieNotification object) => [],
        toManyRelations: (FoodMobieNotification object) => {},
        getId: (FoodMobieNotification object) => object.id,
        setId: (FoodMobieNotification object, int id) {
          object.id = id;
        },
        objectToFB: (FoodMobieNotification object, fb.Builder fbb) {
          final notificationIdOffset = fbb.writeString(object.notificationId);
          final titleOffset = fbb.writeString(object.title);
          final dateOffset = fbb.writeString(object.date);
          final timeOffset = fbb.writeString(object.time);
          final imageOffset = fbb.writeString(object.image);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, notificationIdOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(4, dateOffset);
          fbb.addOffset(5, timeOffset);
          fbb.addOffset(6, imageOffset);
          fbb.addOffset(7, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FoodMobieNotification(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Recommend: EntityDefinition<Recommend>(
        model: _entities[2],
        toOneRelations: (Recommend object) => [],
        toManyRelations: (Recommend object) => {},
        getId: (Recommend object) => object.id,
        setId: (Recommend object, int id) {
          object.id = id;
        },
        objectToFB: (Recommend object, fb.Builder fbb) {
          final foodIdOffset = fbb.writeString(object.foodId);
          final nameOffset = fbb.writeString(object.name);
          final mealOffset = fbb.writeString(object.meal);
          final recipeOffset = fbb.writeString(object.recipe);
          final imageOffset = fbb.writeString(object.image);
          final caloriesOffset = fbb.writeString(object.calories);
          final ingredientsOffset = fbb.writeString(object.ingredients);
          final timeOffset = fbb.writeString(object.time);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, foodIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, mealOffset);
          fbb.addOffset(4, recipeOffset);
          fbb.addOffset(5, imageOffset);
          fbb.addOffset(6, caloriesOffset);
          fbb.addOffset(7, ingredientsOffset);
          fbb.addOffset(8, timeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Recommend(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[3],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) =>
            {RelInfo<User>.toMany(1, object.uId): object.food},
        getId: (User object) => object.uId,
        setId: (User object, int id) {
          object.uId = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final userNameOffset = object.userName == null
              ? null
              : fbb.writeString(object.userName!);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          fbb.startTable(9);
          fbb.addInt64(0, object.uId);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, firstNameOffset);
          fbb.addOffset(4, lastNameOffset);
          fbb.addOffset(5, userNameOffset);
          fbb.addOffset(6, imageOffset);
          fbb.addOffset(7, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.uId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              userName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              uId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(object.food, store,
              RelInfo<User>.toMany(1, object.uId), store.box<User>());
          return object;
        }),
    UserFeedback: EntityDefinition<UserFeedback>(
        model: _entities[4],
        toOneRelations: (UserFeedback object) => [],
        toManyRelations: (UserFeedback object) => {},
        getId: (UserFeedback object) => object.fId,
        setId: (UserFeedback object, int id) {
          object.fId = id;
        },
        objectToFB: (UserFeedback object, fb.Builder fbb) {
          final feedbackIdOffset = object.feedbackId == null
              ? null
              : fbb.writeString(object.feedbackId!);
          final subjectOffset =
              object.subject == null ? null : fbb.writeString(object.subject!);
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          fbb.startTable(5);
          fbb.addInt64(0, object.fId);
          fbb.addOffset(1, feedbackIdOffset);
          fbb.addOffset(2, subjectOffset);
          fbb.addOffset(3, messageOffset);
          fbb.finish(fbb.endTable());
          return object.fId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserFeedback(
              subject: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              feedbackId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              fId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Reminder: EntityDefinition<Reminder>(
        model: _entities[5],
        toOneRelations: (Reminder object) => [],
        toManyRelations: (Reminder object) => {},
        getId: (Reminder object) => object.rId,
        setId: (Reminder object, int id) {
          object.rId = id;
        },
        objectToFB: (Reminder object, fb.Builder fbb) {
          final reminderIdOffset = object.reminderId == null
              ? null
              : fbb.writeString(object.reminderId!);
          final foodnameOffset = object.foodname == null
              ? null
              : fbb.writeString(object.foodname!);
          final caloriesOffset = object.calories == null
              ? null
              : fbb.writeString(object.calories!);
          final cookingtimeOffset = object.cookingtime == null
              ? null
              : fbb.writeString(object.cookingtime!);
          final mealOffset =
              object.meal == null ? null : fbb.writeString(object.meal!);
          final dateOffset =
              object.date == null ? null : fbb.writeString(object.date!);
          final timeOffset =
              object.time == null ? null : fbb.writeString(object.time!);
          final recipeOffset =
              object.recipe == null ? null : fbb.writeString(object.recipe!);
          final ingredientsOffset = object.ingredients == null
              ? null
              : fbb.writeString(object.ingredients!);
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          fbb.startTable(13);
          fbb.addInt64(0, object.rId);
          fbb.addOffset(1, reminderIdOffset);
          fbb.addOffset(2, foodnameOffset);
          fbb.addOffset(3, caloriesOffset);
          fbb.addOffset(4, cookingtimeOffset);
          fbb.addOffset(5, mealOffset);
          fbb.addOffset(6, dateOffset);
          fbb.addOffset(7, timeOffset);
          fbb.addOffset(8, recipeOffset);
          fbb.addOffset(9, ingredientsOffset);
          fbb.addOffset(10, messageOffset);
          fbb.finish(fbb.endTable());
          return object.rId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Reminder(
              foodname: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              calories: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              cookingtime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              meal: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              recipe: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              ingredients: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24),
              time:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              date: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 16),
              reminderId: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 6),
              rId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Food] entity fields to define ObjectBox queries.
class Food_ {
  /// see [Food.id]
  static final id = QueryIntegerProperty<Food>(_entities[0].properties[0]);

  /// see [Food.foodId]
  static final foodId = QueryStringProperty<Food>(_entities[0].properties[1]);

  /// see [Food.name]
  static final name = QueryStringProperty<Food>(_entities[0].properties[2]);

  /// see [Food.meal]
  static final meal = QueryStringProperty<Food>(_entities[0].properties[3]);

  /// see [Food.recipe]
  static final recipe = QueryStringProperty<Food>(_entities[0].properties[4]);

  /// see [Food.image]
  static final image = QueryStringProperty<Food>(_entities[0].properties[5]);

  /// see [Food.calories]
  static final calories = QueryStringProperty<Food>(_entities[0].properties[6]);

  /// see [Food.ingredients]
  static final ingredients =
      QueryStringProperty<Food>(_entities[0].properties[7]);

  /// see [Food.time]
  static final time = QueryStringProperty<Food>(_entities[0].properties[8]);
}

/// [FoodMobieNotification] entity fields to define ObjectBox queries.
class FoodMobieNotification_ {
  /// see [FoodMobieNotification.id]
  static final id =
      QueryIntegerProperty<FoodMobieNotification>(_entities[1].properties[0]);

  /// see [FoodMobieNotification.notificationId]
  static final notificationId =
      QueryStringProperty<FoodMobieNotification>(_entities[1].properties[1]);

  /// see [FoodMobieNotification.title]
  static final title =
      QueryStringProperty<FoodMobieNotification>(_entities[1].properties[2]);

  /// see [FoodMobieNotification.date]
  static final date =
      QueryStringProperty<FoodMobieNotification>(_entities[1].properties[3]);

  /// see [FoodMobieNotification.time]
  static final time =
      QueryStringProperty<FoodMobieNotification>(_entities[1].properties[4]);

  /// see [FoodMobieNotification.image]
  static final image =
      QueryStringProperty<FoodMobieNotification>(_entities[1].properties[5]);

  /// see [FoodMobieNotification.description]
  static final description =
      QueryStringProperty<FoodMobieNotification>(_entities[1].properties[6]);
}

/// [Recommend] entity fields to define ObjectBox queries.
class Recommend_ {
  /// see [Recommend.id]
  static final id = QueryIntegerProperty<Recommend>(_entities[2].properties[0]);

  /// see [Recommend.foodId]
  static final foodId =
      QueryStringProperty<Recommend>(_entities[2].properties[1]);

  /// see [Recommend.name]
  static final name =
      QueryStringProperty<Recommend>(_entities[2].properties[2]);

  /// see [Recommend.meal]
  static final meal =
      QueryStringProperty<Recommend>(_entities[2].properties[3]);

  /// see [Recommend.recipe]
  static final recipe =
      QueryStringProperty<Recommend>(_entities[2].properties[4]);

  /// see [Recommend.image]
  static final image =
      QueryStringProperty<Recommend>(_entities[2].properties[5]);

  /// see [Recommend.calories]
  static final calories =
      QueryStringProperty<Recommend>(_entities[2].properties[6]);

  /// see [Recommend.ingredients]
  static final ingredients =
      QueryStringProperty<Recommend>(_entities[2].properties[7]);

  /// see [Recommend.time]
  static final time =
      QueryStringProperty<Recommend>(_entities[2].properties[8]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.uId]
  static final uId = QueryIntegerProperty<User>(_entities[3].properties[0]);

  /// see [User.userId]
  static final userId = QueryStringProperty<User>(_entities[3].properties[1]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[3].properties[2]);

  /// see [User.firstName]
  static final firstName =
      QueryStringProperty<User>(_entities[3].properties[3]);

  /// see [User.lastName]
  static final lastName = QueryStringProperty<User>(_entities[3].properties[4]);

  /// see [User.userName]
  static final userName = QueryStringProperty<User>(_entities[3].properties[5]);

  /// see [User.image]
  static final image = QueryStringProperty<User>(_entities[3].properties[6]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[3].properties[7]);

  /// see [User.food]
  static final food =
      QueryRelationToMany<User, Food>(_entities[3].relations[0]);
}

/// [UserFeedback] entity fields to define ObjectBox queries.
class UserFeedback_ {
  /// see [UserFeedback.fId]
  static final fId =
      QueryIntegerProperty<UserFeedback>(_entities[4].properties[0]);

  /// see [UserFeedback.feedbackId]
  static final feedbackId =
      QueryStringProperty<UserFeedback>(_entities[4].properties[1]);

  /// see [UserFeedback.subject]
  static final subject =
      QueryStringProperty<UserFeedback>(_entities[4].properties[2]);

  /// see [UserFeedback.message]
  static final message =
      QueryStringProperty<UserFeedback>(_entities[4].properties[3]);
}

/// [Reminder] entity fields to define ObjectBox queries.
class Reminder_ {
  /// see [Reminder.rId]
  static final rId = QueryIntegerProperty<Reminder>(_entities[5].properties[0]);

  /// see [Reminder.reminderId]
  static final reminderId =
      QueryStringProperty<Reminder>(_entities[5].properties[1]);

  /// see [Reminder.foodname]
  static final foodname =
      QueryStringProperty<Reminder>(_entities[5].properties[2]);

  /// see [Reminder.calories]
  static final calories =
      QueryStringProperty<Reminder>(_entities[5].properties[3]);

  /// see [Reminder.cookingtime]
  static final cookingtime =
      QueryStringProperty<Reminder>(_entities[5].properties[4]);

  /// see [Reminder.meal]
  static final meal = QueryStringProperty<Reminder>(_entities[5].properties[5]);

  /// see [Reminder.date]
  static final date = QueryStringProperty<Reminder>(_entities[5].properties[6]);

  /// see [Reminder.time]
  static final time = QueryStringProperty<Reminder>(_entities[5].properties[7]);

  /// see [Reminder.recipe]
  static final recipe =
      QueryStringProperty<Reminder>(_entities[5].properties[8]);

  /// see [Reminder.ingredients]
  static final ingredients =
      QueryStringProperty<Reminder>(_entities[5].properties[9]);

  /// see [Reminder.message]
  static final message =
      QueryStringProperty<Reminder>(_entities[5].properties[10]);
}
